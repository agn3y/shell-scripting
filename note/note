#!/bin/bash
# =============================
# SHELL SCRIPTING BASICS (DevOps Use)
# =============================

# -----------------------------
# Comments
# -----------------------------

# Single-line comment
: '
This is a
multi-line comment
'

# -----------------------------
# Defining Variables
# -----------------------------

Var_name=value
Var_name=$(date)         # Run command and store output
echo "$Var_name"

readonly name="agn3y"    # This value cannot be changed

# -----------------------------
# Arrays
# -----------------------------

new_arr=(1 2 3 "name" hello)
new_arr+=(new 1 2 3)

echo "${new_arr[3]}"
echo "${new_arr[*]}"
echo "${#new_arr[*]}"
echo "${new_arr[*]:2:2}"

# -----------------------------
# Associative Arrays (Key-Value)
# -----------------------------

declare -A myarray
myarray=([name]="agney" [age]=24 [city]="bharuch")
echo "Name is ${myarray[name]}"

# -----------------------------
# String Operations
# -----------------------------

myvar="hello all brave warriors"

length=${#myvar}
upper=${myvar^^}
lower=${myvar,,}
replace=${myvar/all/strong}
slice=${myvar:6:11}

echo "$length"
echo "$upper"
echo "$lower"
echo "$replace"
echo "$slice"

# -----------------------------
# Taking Input from User
# -----------------------------

read -p "Your name: " varname

# -----------------------------
# Arithmetic Expressions
# -----------------------------

a=10
b=3

echo $((a + b))
echo $((a - b))
echo $((a * b))
echo $((a / b))
echo $((a % b))

let sum=a+b
echo "$sum"

expr $a + $b

# -----------------------------
# Comparison Operators (Numbers)
# -----------------------------

# [ "$a" -eq "$b" ]    # equal
# [ "$a" -ne "$b" ]    # not equal
# [ "$a" -gt "$b" ]    # greater than
# [ "$a" -lt "$b" ]    # less than
# [ "$a" -ge "$b" ]    # greater or equal
# [ "$a" -le "$b" ]    # less or equal

# -----------------------------
# String Operators
# -----------------------------

# [ "$a" = "$b" ]      # equal
# [ "$a" != "$b" ]     # not equal
# [ -z "$a" ]          # is empty
# [ -n "$a" ]          # is not empty

# -----------------------------
# File Test Operators
# -----------------------------

# [ -f file ]          # file exists and is regular file
# [ -d dir ]           # directory exists
# [ -e path ]          # file/directory exists
# [ -s file ]          # file is not empty
# [ -r file ]          # file is readable
# [ -w file ]          # file is writable
# [ -x file ]          # file is executable

# -----------------------------
# Special Operators
# -----------------------------

# $(...)     → Command substitution
# `...`      → Old syntax for command substitution
# |          → Pipe
# >          → Redirect output
# >>         → Append to file
# <          → Input from file
# 2>         → Redirect stderr
# &>         → Redirect both stdout and stderr

# -----------------------------
# Conditional Statements
# -----------------------------

read -p "Enter your marks: " Marks

if [[ "$Marks" -gt 40 ]]; then
    echo "You have cleared the exam"
else
    echo "You did not clear the exam"
fi

read -p "Enter your marks again: " Marks

if [[ "$Marks" -ge 80 ]]; then
    echo "You have cleared the exam with First Class"
elif [[ "$Marks" -ge 60 ]]; then
    echo "You have achieved Second Class"
elif [[ "$Marks" -ge 40 ]]; then
    echo "You passed with Third Class"
else
    echo "You did not clear the exam"
fi

# -----------------------------
# Case Statement with Menu Loop
# -----------------------------

while true; do
    echo "========== MENU =========="
    echo "a = Check date"
    echo "b = System information"
    echo "c = Update the system"
    echo "q = Quit"
    echo "=========================="

    read -p "Enter your choice: " choice

    case $choice in
        a) date ;;
        b) uname -a ;;
        c) sudo apt update -y ;;
        q) break ;;
        *) echo "Wrong input, please try again." ;;
    esac
    echo
done

# -----------------------------
# Ternary-like Operation
# -----------------------------

age=18
[[ $age -ge 18 ]] && echo "You can drive" || echo "You can't drive"

# -----------------------------
# For Loops
# -----------------------------

for i in 1 2 3 4 5; do 
    echo "Number is $i"
done

for i in raju sham baburao; do
    echo "$i"
done

for i in {1..10}; do
    echo "$i"
done

# -----------------------------
# For Loop with File
# -----------------------------

FILE=/home/agn3y/shell-scripting/names
for name in $(cat "$FILE"); do 
    echo "Name is $name"
done

# -----------------------------
# For Loop with Array
# -----------------------------

myarray=(1 2 3 4 5 6 hello notty)
length=${#myarray[@]}

for (( i=0; i<length; i++ )); do
    echo "value is ${myarray[i]}"
done

# -----------------------------
# While Loop
# -----------------------------

count=0
num=10

while [[ $count -le $num ]]; do 
    echo "Number is $count"
    ((count++))
done

# -----------------------------
# While Loop with File
# -----------------------------

while read myvar; do
    echo "value from file is $myvar"
done < "$FILE"

# -----------------------------
# Until Loop
# -----------------------------

a=10
until [ $a -eq 1 ]; do
    echo "$a"
    a=$(expr $a - 1)
done

# -----------------------------
# Infinite Loops
# -----------------------------

# While loop version
# while true; do 
#     echo "Hi"
#     sleep 2
# done

# For loop version
# for (( ;; )); do 
#     echo "Hi buddy"
#     sleep 2
# done

# -----------------------------
# Reading CSV
# -----------------------------

while IFS="," read field1 field2 field3; do 
    echo "$field1"
    echo "$field2"
    echo "$field3"
done < file_name.csv

# Skip header and read CSV
tail -n +2 file.csv | while IFS="," read id name age; do 
    echo "Id is $id"
done

# -----------------------------
# Functions
# -----------------------------

hellomessage() {
    echo "Hello"
}
hellomessage

# -----------------------------
# Functions with Arguments
# -----------------------------

welcome() {
    echo "My name is $1"
    echo "My age is $2"
}
welcome anirudh 24
welcome agney 23

# Runtime arguments usage

myfunc(){
    echo "I love $1"
    echo "I love your mom's $2"
}

myfunc "$1" "$2"

# To access all arguments
echo "All arguments: $@"

# Count of arguments
echo "Argument count: $#"

# -----------------------------
# For loop using arguments
# -----------------------------

for filename in "$@"; do 
    echo "Copying file - $filename"
done

# -----------------------------
# shift command
# -----------------------------

echo "Creating user"
echo "Username is $1"

shift
echo "Description is $@"

# -----------------------------
# break keyword
# -----------------------------

no=7
for i in 1 2 3 4 5 6 7 8 9; do 
    if [[ $i -eq 6 ]]; then
        echo "$no is found!!"
        break
    fi
done

# -----------------------------
# continue keyword
# -----------------------------

for i in 1 2 3 4 5 6 7 8 9; do 
    let n=i%2
    if [[ $n -eq 0 ]]; then 
        continue
    fi
    echo "Odd number is $i"
done

# -----------------------------
# exit keyword
# -----------------------------

if [[ $# -eq 0 ]]; then 
    echo "No arguments were passed"
    exit
fi

# -----------------------------
# checking exit status
# -----------------------------

# use immediately after a command
some_command
echo "Exit code: $?"

# -----------------------------
# Useful Commands
# -----------------------------

# 1. basename
basename /home/agn3y/brainstack/filename.txt    # → filename.txt

# 2. dirname
dirname /home/agn3y/brainstack/Linux             # → /home/agn3y/brainstack

# 3. realpath
realpath filename                                # → Absolute path

# -----------------------------
# File/Directory existence checks
# -----------------------------

if [[ -d folder_name ]]; then     # Folder exists
    echo "Folder exists"
fi

if [[ ! -d folder_name ]]; then   # Folder does not exist
    echo "Folder does not exist"
fi

if [[ -f file_name ]]; then       # File exists
    echo "File exists"
fi

if [[ ! -f file_name ]]; then     # File does not exist
    echo "File does not exist"
fi

# -----------------------------
# Random and UID
# -----------------------------

echo "$RANDOM"     # Random number (1–32767)
echo "$UID"        # Current user ID

# -----------------------------
# Root User Check
# -----------------------------

if [[ $UID -eq 0 ]]; then 
    echo "Permission granted (Root user)"
else
    echo "Permission not granted (Not root)"
fi

# -----------------------------
# /dev/null Example
# -----------------------------

cd /root/ &> /dev/null   # Suppress output and errors

# -----------------------------
# Print Script Name
# -----------------------------

echo "The name of the script is: ${0}"

