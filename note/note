#!/bin/bash
# =============================
# SHELL SCRIPTING BASICS (DevOps Use)
# =============================

# -----------------------------
# Comments
# -----------------------------

# Single-line comment starts with #
: '
This is a
multi-line comment
'

# -----------------------------
# Defining Variables
# -----------------------------

# No spaces around "="
Var_name=value
Var_name=$(date)         # Run command and store output

echo "$Var_name"

# Readonly variable
readonly name="agn3y"    # This value cannot be changed

# -----------------------------
# Arrays
# -----------------------------

new_arr=(1 2 3 "name" hello)      # Space-separated, not comma
new_arr+=(new 1 2 3)              # Append new elements

echo "${new_arr[3]}"              # Print value at index 3
echo "${new_arr[*]}"              # Print all array values
echo "${#new_arr[*]}"             # Length of array
echo "${new_arr[*]:2:2}"          # From index 2, print 2 elements

# -----------------------------
# Associative Arrays (Key-Value)
# -----------------------------

declare -A myarray                                 
myarray=([name]="agney" [age]=24 [city]="bharuch")

echo "Name is ${myarray[name]}"

# -----------------------------
# String Operations
# -----------------------------

myvar="hello all brave warriors"

length=${#myvar}                               # String length
upper=${myvar^^}                               # Convert to UPPERCASE
lower=${myvar,,}                               # Convert to lowercase
replace=${myvar/all/strong}                    # Replace first match
slice=${myvar:6:11}                            # Slice 11 chars from index 6

echo "$length"
echo "$upper"
echo "$lower"
echo "$replace"
echo "$slice"

# -----------------------------
# Taking Input from User
# -----------------------------

read varname                          # Take input without prompt
read -p "Your name: " varname        # Take input with prompt

# -----------------------------
# Arithmetic Expressions
# -----------------------------

a=10
b=3

# Method 1: $((...))
echo $((a + b))     # Addition
echo $((a - b))     # Subtraction
echo $((a * b))     # Multiplication
echo $((a / b))     # Division (integer)
echo $((a % b))     # Remainder

# Method 2: let
let sum=a+b
echo $sum

# Method 3: expr (older)
expr $a + $b        # Note: spaces are required

# -----------------------------
# Comparison Operators (Numbers)
# -----------------------------

# [ "$a" -eq "$b" ]   → Equal only work for numbers
# [ "$a" == "$b"  ]   # To compare strings
# [ "$a" -ne "$b" ]   → Not equal
# [ "$a" -gt "$b" ]   → Greater than
# [ "$a" -lt "$b" ]   → Less than
# [ "$a" -ge "$b" ]   → Greater or equal
# [ "$a" -le "$b" ]   → Less or equal

# -----------------------------
# String Operators
# -----------------------------

# [ "$a" = "$b" ]     → Equal
# [ "$a" != "$b" ]    → Not equal
# [ -z "$a" ]         → Is empty
# [ -n "$a" ]         → Is not empty

# -----------------------------
# File Test Operators
# -----------------------------

# [ -f file ]         → Regular file exists
# [ -d dir ]          → Directory exists
# [ -e path ]         → File or directory exists
# [ -s file ]         → File not empty
# [ -r file ]         → Readable
# [ -w file ]         → Writable
# [ -x file ]         → Executable

# -----------------------------
# Special Operators
# -----------------------------

# $(...)              → Command substitution
# `...`               → Same as above (older syntax)
# |                   → Pipe
# >                   → Redirect output
# >>                  → Append to file
# <                   → Input from file
# 2>                  → Redirect stderr
# &>                  → Redirect stdout and stderr

# -----------------------------
# Conditional Statements
# -----------------------------

# --- if-else ---
read -p "Enter your marks: " Marks

if [[ "$Marks" -gt 40 ]]
then
    echo "You have cleared the exam"
else
    echo "You did not clear the exam"
fi

# --- if-elif-else ---
read -p "Enter your marks here: " Marks

if [[ "$Marks" -ge 80 ]]
then
    echo "You have cleared the exam with First Class"
elif [[ "$Marks" -ge 60 ]]
then
    echo "You have achieved Second Class"
elif [[ "$Marks" -ge 40 ]]
then
    echo "You passed with Third Class"
else
    echo "You did not clear the exam"
fi

# -----------------------------
# Case statement with loop and exit option
# -----------------------------

while true; do
    echo "a = Press a to check date"
    echo "b = Press b to get system information"
    echo "c = Press c to update the system"
    echo "q = Quit"

    read -p "Enter your choice: " choice

    case $choice in
        a)
            echo "Date and time:"
            date
            ;;
        b)
            echo "System information:"
            uname -a
            ;;
        c)
            echo "Updating system..."
            sudo apt update -y
            ;;
        q)
            echo "Exiting script."
            break
            ;;
        *)
            echo "Wrong input, please try again."
            ;;
    esac
    echo # empty line for readability
done

