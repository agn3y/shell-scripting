#!/bin/bash
# =============================
# SHELL SCRIPTING BASICS (DevOps Use)
# =============================

# -----------------------------
# Comments
# -----------------------------

# Single-line comment
: '
This is a
multi-line comment
'

# -----------------------------
# Defining Variables
# -----------------------------

Var_name=value
Var_name=$(date)         # Run command and store output
echo "$Var_name"

readonly name="agn3y"    # This value cannot be changed

# -----------------------------
# Arrays
# -----------------------------

new_arr=(1 2 3 "name" hello)
new_arr+=(new 1 2 3)

echo "${new_arr[3]}"
echo "${new_arr[*]}"
echo "${#new_arr[*]}"
echo "${new_arr[*]:2:2}"

# -----------------------------
# Associative Arrays (Key-Value)
# -----------------------------

declare -A myarray                                 
myarray=([name]="agney" [age]=24 [city]="bharuch")
echo "Name is ${myarray[name]}"

# -----------------------------
# String Operations
# -----------------------------

myvar="hello all brave warriors"

length=${#myvar}
upper=${myvar^^}
lower=${myvar,,}
replace=${myvar/all/strong}
slice=${myvar:6:11}

echo "$length"
echo "$upper"
echo "$lower"
echo "$replace"
echo "$slice"

# -----------------------------
# Taking Input from User
# -----------------------------

read varname
read -p "Your name: " varname

# -----------------------------
# Arithmetic Expressions
# -----------------------------

a=10
b=3

echo $((a + b))
echo $((a - b))
echo $((a * b))
echo $((a / b))
echo $((a % b))

let sum=a+b
echo $sum

expr $a + $b

# -----------------------------
# Comparison Operators (Numbers)
# -----------------------------

# [ "$a" -eq "$b" ]
# [ "$a" -ne "$b" ]
# [ "$a" -gt "$b" ]
# [ "$a" -lt "$b" ]
# [ "$a" -ge "$b" ]
# [ "$a" -le "$b" ]

# -----------------------------
# String Operators
# -----------------------------

# [ "$a" = "$b" ]
# [ "$a" != "$b" ]
# [ -z "$a" ]
# [ -n "$a" ]

# -----------------------------
# File Test Operators
# -----------------------------

# [ -f file ]
# [ -d dir ]
# [ -e path ]
# [ -s file ]
# [ -r file ]
# [ -w file ]
# [ -x file ]

# -----------------------------
# Special Operators
# -----------------------------

# $(...)     → Command substitution
# `...`      → Old syntax
# |          → Pipe
# >          → Redirect output
# >>         → Append to file
# <          → Input from file
# 2>         → Redirect stderr
# &>         → Redirect stdout and stderr

# -----------------------------
# Conditional Statements
# -----------------------------

read -p "Enter your marks: " Marks

if [[ "$Marks" -gt 40 ]]; then
    echo "You have cleared the exam"
else
    echo "You did not clear the exam"
fi

read -p "Enter your marks again: " Marks

if [[ "$Marks" -ge 80 ]]; then
    echo "You have cleared the exam with First Class"
elif [[ "$Marks" -ge 60 ]]; then
    echo "You have achieved Second Class"
elif [[ "$Marks" -ge 40 ]]; then
    echo "You passed with Third Class"
else
    echo "You did not clear the exam"
fi

# -----------------------------
# Case Statement with Menu Loop
# -----------------------------

while true; do
    echo "========== MENU =========="
    echo "a = Check date"
    echo "b = System information"
    echo "c = Update the system"
    echo "q = Quit"
    echo "=========================="

    read -p "Enter your choice: " choice

    case $choice in
        a) date ;;
        b) uname -a ;;
        c) sudo apt update -y ;;
        q) break ;;
        *) echo "Wrong input, please try again." ;;
    esac
    echo
done

# -----------------------------
# Ternary-like Operation
# -----------------------------

age=18
[[ $age -ge 18 ]] && echo "You can drive" || echo "You can't drive"

# -----------------------------
# For Loops
# -----------------------------

for i in 1 2 3 4 5; do 
    echo "Number is $i"
done

for i in raju sham baburao; do
    echo "$i"
done

for i in {1..10}; do
    echo "$i"
done

# -----------------------------
# For Loop with File
# -----------------------------

FILE=/home/agn3y/shell-scripting/names
for name in $(cat "$FILE"); do 
    echo "Name is $name"
done

# -----------------------------
# For Loop with Array
# -----------------------------

myarray=(1 2 3 4 5 6 hello notty)
length=${#myarray[@]}

for (( i=0; i<length; i++ )); do
    echo "value is ${myarray[i]}"
done

# -----------------------------
# While Loop
# -----------------------------

count=0
num=10

while [[ $count -le $num ]]; do 
    echo "Number is $count"
    ((count++))
done

# -----------------------------
# While Loop with File
# -----------------------------

while read myvar; do
    echo "value from file is $myvar"
done < "$FILE"

# -----------------------------
# Until Loop
# -----------------------------

a=10
until [ $a -eq 1 ]; do
    echo "$a"
    a=$(expr $a - 1)
done

# -----------------------------
# Infinite Loops
# -----------------------------

# While loop version
while true; do 
    echo "Hi"
    sleep 2
done

# For loop version
for (( ;; )); do 
    echo "Hi buddy"
    sleep 2
done

# -----------------------------
# Reading CSV
# -----------------------------

while IFS="," read field1 field2 field3; do 
    echo "$field1"
    echo "$field2"
    echo "$field3"
done < file_name.csv

# Skip header and read CSV
tail -n +2 file.csv | while IFS="," read id name age; do 
    echo "Id is $id"
done

# -----------------------------
# Functions
# -----------------------------

hellomessage() {
    echo "Hello"
}
hellomessage

# -----------------------------
# Functions with Arguments
# -----------------------------

welcome() {
    echo "My name is $1"
    echo "My age is $2"
}
welcome anirudh 24
welcome agney 23


# Runtime agruments using

myfunc(){
	echo "i love $1"
	echo "ilove your mom's $2"
}

myfunc

# now use this from terminal like ./bash.sh arg1 arg2
# to access all the arguments at once we can use something like
echo "To see all arguments use $@"

# to see number of arguments 
echo "to see number of arguments we can use $#"


# using arguments in for loop

for filename in $@
do 
	echo "Copying file - $filename"
done

# shifting arguments
echo "creating user"
echo "username is $1"

shift
echo "Descrption is $@"


# keywords

1.break 

no=7
for i in 1 2 3 4 5 6 7 8 9 
do 
	if [[ $i -eq 6]]
	then
		echo "$no is found!!"
		break
	fi
done

2.continue

for i in 1 2 3 4 5 6 7 8 9
do 
	let n=i%2
	if [[ $n -eq 0 ]]
	then 
		continue
	fi
	echo "odd number is $i"
done

3.exit

# to stop execution of script

if [[ $# -eq 0 ]]
then 
	echo "no arguments were passed"
	exit
fi

# checking exit status

$? ## use this 
echo $?


# some more things which can be helpfull

1. basename

$ basename /home/agn3y/brainstack/filename.txt
# return filename.txt

2. dirname

$ dirname /home/agn3y/brainstack/Linux
# return Linux

3.realpath 

$ realpath filename		# gives you path of file

## check file and folder exist or not

if [[ -d folder_name ]]		# if folder exist
[ ! -d folder_name]		# if folder does not exist

if [ -f file_name ]		# if file exist
if [ ! -f file_name ]		# if file dont exist

4.RANDOM			# generates a random integer number between 1 to 32767
5.UID 				# user id of the user logged in

# MAKE SCRIPT WHICH CHEKS IF USER IS ROOT USER OR NOT

if [[ $UID -eq 0 ]]
then 
	echo "permission granted"
else
	echo "permission not granted"
fi

# using dev null
#
# we can redirect the output to /dev/null
cd /root/ &> /dev/null

## rare thing to see 
## print name of the script

echo "the name of the script is : ${0}"
